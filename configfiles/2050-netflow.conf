# SOF-ELKÂ® Configuration File
# (C)2023 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for NetFlow records

filter {
  # tag with any known uniquely-identifying characteristics are present
  if [type] == "archive-netflow" and [raw][logName] {
    mutate {
      add_tag => [ "gcp-vpcflow" ]
      add_field => { "[cloud][provider]" => "gcp" }
    }
  }

  if [type] == "archive-netflow" and "gcp-vpcflow" not in [tags] {
    # drop the header row and NODATA rows from Amazon VPC Flow entries
    if [message] =~ "^version"  or [message] =~ "^account-id" or [message] =~ "NODATA" { drop { } }

    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
      # nfdump2sof-elk.sh
      match => [ "message", "(?:%{IPORHOST:[netflow][exporter][address]})?(?:%{SPACE})?%{NONNEGINT:[destination][as][number]:int}%{SPACE}%{NONNEGINT:destination_mask:int}%{SPACE}%{NONNEGINT:engine_type:int}/%{NONNEGINT:engine_id:int}%{SPACE}%{TIMESTAMP_NETFLOW:flow_start_raw}%{SPACE}%{NONNEGINT:flow_records}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:[destination][bytes]}%{SPACE}%{NONNEGINT:[destination][packets]}%{SPACE}%{NONNEGINT:input_snmp:int}%{SPACE}%{IP:[destination][ip]}%{SPACE}%{IP:next_hop_ip}%{SPACE}%{IP:[source][ip]}%{SPACE}(%{ICMP_TYPECODE}|%{NONNEGINT:[destination][port]:int})%{SPACE}%{NONNEGINT:[source][port]:int}%{SPACE}%{TIMESTAMP_NETFLOW:flow_end_raw}%{SPACE}%{NONNEGINT:output_snmp:int}%{SPACE}%{INT:[network][iana_number]:int}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:[source][as][number]:int}%{SPACE}%{NONNEGINT:source_mask:int}%{SPACE}%{NONNEGINT:source_tos:int}%{SPACE}%{NOTSPACE:tcp_flags}%{SPACE}%{NONNEGINT:[netflow][exporter][version]:int}" ]

      # aws-vpcflow2sof-elk.sh
      match => [ "message", "%{INT:[aws][vpcflow][version]} %{INT:[aws][vpcflow][account_id]} %{NOTSPACE:[aws][vpcflow][interface_id]} %{IP:[source][ip]} %{IP:[destination][ip]} %{INT:[source][port]} %{INT:[destination][port]} %{INT:[network][iana_number]:int} %{INT:[destination][packets]} %{INT:[destination][bytes]} %{INT:flow_start_raw} %{INT:flow_end_raw} %{WORD:[aws][vpcflow][action]} %{WORD:[aws][vpcflow][log_status]}" ]
      # AWS VPC Flow v5
      match => [ "message", "%{INT:[aws][vpcflow][account_id]} %{WORD:[aws][vpcflow][action]} %{NOTSPACE:vpcflow_azid} %{INT:[destination][bytes]} %{IP:[destination][ip]} %{INT:[destination][port]} %{INT:flow_end_raw} %{WORD:vpcflow_direction} %{NOTSPACE:[aws][vpcflow][instance_id]} %{NOTSPACE:[aws][vpcflow][interface_id]} %{WORD:[aws][vpcflow][log_status]} %{INT:[destination][packets]} %{NOTSPACE:vpcflow_destination_aws_service} %{IP:[original_destination][ip]} %{NOTSPACE:vpcflow_source_aws_service} %{IP:[original_source][ip]} %{INT:[network][iana_number]:int} %{NOTSPACE:vpcflow_region} %{IP:[source][ip]} %{INT:[source][port]} %{INT:flow_start_raw} %{NOTSPACE:[aws][vpcflow][vpc_id]} %{INT:[aws][vpcflow][version]} %{WORD:[aws][vpcflow][type]} %{NOTSPACE:vpcflow_traffic_path} %{INT:tcp_flags_int} %{NOTSPACE:[aws][vpcflow][subnet_id]} %{NOTSPACE:vpcflow_sublocation_type} %{NOTSPACE:vpcflow_sublocation_id}" ]

      # azure-vpcflow2sof-elk.sh
      match => [ "message", "^%{GUID:exporter_guid},%{COMMONMAC:exporter_mac},%{POSINT:vpcflow_version},%{DATA:flow_rule},%{DATA:source},%{WORD:state},%{POSINT:flow_start_raw},%{POSINT:flow_end_raw},%{IP:[source][ip]},%{INT:[source][port]},%{IP:[destination][ip]},%{INT:[destination][port]},%{INT:[network][iana_number]:int},%{INT:[source][bytes]},%{INT:[source][packets]},%{INT:[destination][bytes]},%{INT:[destination][packets]},%{INT:direction},%{WORD:traffic_decision}"]

      remove_field => [ "message", "MSECOND" ]
    }

  # Google Compute Platform VPC Flow Logs in JSON format
  # reference: https://cloud.google.com/vpc/docs/flow-logs#VpcDetails
  } else if [type] == "archive-netflow" and "gcp-vpcflow" in [tags] {
    mutate {
# todo: these seem superfluous or duplicative of [gcp][*][vpc][vpc_name]
#        "[raw][jsonPayload][src_instance][vm_name]" => "[cloud][origin][instance][name]"
#        "[raw][jsonPayload][dest_instance][vm_name]" => "[cloud][target][instance][name]"
      rename => {
        "[raw][jsonPayload][start_time]" => "flow_start_raw"
        "[raw][jsonPayload][end_time]" => "flow_end_raw"
        "[raw][jsonPayload][connection][src_ip]" => "[source][ip]"
        "[raw][jsonPayload][connection][dest_ip]" => "[destination][ip]"
        "[raw][jsonPayload][connection][src_port]" => "[source][port]"
        "[raw][jsonPayload][connection][dest_port]" => "[destination][port]"
        "[raw][jsonPayload][connection][protocol]" => "[network][iana_number]"
        "[raw][jsonPayload][bytes_sent]" => "[source][bytes]"
        "[raw][jsonPayload][packets_sent]" => "[source][packets]"
        "[raw][jsonPayload][src_instance][project_id]" => "[gcp][source][instance][project_id]"
        "[raw][jsonPayload][src_instance][region]" => "[gcp][source][instance][region]"
        "[raw][jsonPayload][src_instance][zone]" => "[gcp][source][instance][zone]"
        "[raw][jsonPayload][dest_instance][project_id]" => "[gcp][destination][instance][project_id]"
        "[raw][jsonPayload][dest_instance][region]" => "[gcp][destination][instance][region]"
        "[raw][jsonPayload][dest_instance][zone]" => "[gcp][destination][instance][zone]"
        "[raw][jsonPayload][src_vpc][project_id]" => "[gcp][source][vpc][project][id]"
        "[raw][jsonPayload][src_vpc][subnetwork_name]" => "[gcp][source][vpc][subnetwork_name]"
        "[raw][jsonPayload][src_vpc][vpc_name]" => "[gcp][source][vpc][vpc_name]"
        "[raw][jsonPayload][dest_vpc][project_id]" => "[gcp][destination][vpc][project][id]"
        "[raw][jsonPayload][dest_vpc][subnetwork_name]" => "[gcp][destination][vpc][subnetwork_name]"
        "[raw][jsonPayload][dest_vpc][vpc_name]" => "[gcp][destination][vpc][vpc_name]"
        "[raw][jsonPayload][src_location][asn]" => "[source][as][number]"
        "[raw][jsonPayload][dest_location][asn]" => "[destination][as][number]"
        "[raw][jsonPayload][reporter]" => "[gcp][vpcflow][reporter]"
        "[raw][logName]" => "log_name"
        "[raw][resource][labels][location]" => "resource_location"
        "[raw][resource][project_id]" => "project_id"
        "[raw][resource][subnetwork_id]" => "subnetwork_id"
        "[raw][resource][subnetwork_name]" => "subnetwork_name"
        "[raw][resource][type]" => "resource_type"
      }
    }
    if [gcp][vpcflow][reporter] == "SRC" {
      mutate {
        add_field => { "[netflow][exporter][address]" => "%{[source][ip]}" }
      }
    } else if [gcp][vpcflow][reporter] == "DEST" {
      mutate {
        add_field => { "[netflow][exporter][address]" => "%{[destination][ip]}" }
      }
    }

    # remove remaining fields
    mutate {
      remove_field => [ "raw" ]
    }
  }

  if [type] == "archive-netflow" {
    if ![netflow][exporter][address] {
      mutate {
        replace => {
          "[netflow][exporter][address]" => "0.0.0.0:0"
        }
      }
    }

    ## unify timestamp formats between live and archive
    ##  2014-05-11 16:25:11.841 (archived from nfdump)
    date {
      match => [ "flow_start_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
      target => "[netflow][flow_start]"
    }
    date {
      match => [ "flow_end_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
      target => "[netflow][flow_end]"
    }
    mutate {
      # use the flow start timestamp for the event timestamp
      replace => { "@timestamp" => "%{[netflow][flow_start_milliseconds]}" }
      remove_field => [ "flow_start_raw", "flow_end_raw" ]
    }
  }

  if [type] == "netflow" {
    # this is strictly cosmetic
    mutate {
      remove_tag => [ "process_archive" ]
    }

    # possibly ECS<->non-ECS?
    if [netflow][flow_start_nanoseconds] and [netflow][flow_end_nanoseconds] {
      mutate {
        add_field => {
          "flow_start" => "%{[netflow][flow_start_nanoseconds]}"
          "flow_end" => "%{[netflow][flow_end_nanoseconds]}"
        }
      }
    } else if [netflow][flow_start_milliseconds] and [netflow][flow_end_milliseconds] {
      mutate {
        add_field => {
          "flow_start" => "%{[netflow][flow_start_milliseconds]}"
          "flow_end" => "%{[netflow][flow_end_milliseconds]}"
        }
      }
    } else if [netflow][flow_start_seconds] and [netflow][flow_end_seconds] {
      mutate {
        add_field => {
          "flow_start" => "%{[netflow][flow_start_seconds]}"
          "flow_end" => "%{[netflow][flow_end_seconds]}"
        }
      }
    }
    if [netflow][connection_sum_duration_seconds] {
      mutate {
        add_field => { "[netflow][flow_duration]" => "%{[netflow][connection_sum_duration_seconds]} "}
      }
    }
    if [netflow][exporter][address] {
      grok {
        match => [ "[netflow][exporter][address]", "^%{IP:[netflow][exporter][ip]}" ]
      }
    }
    ## end ECS<->non-ECS compatibility block
  }

  if [type] == "netflow" or [type] == "archive-netflow" {
    # Calculate the duration from flow_start and flow_end
    if [netflow][flow_start_milliseconds] and [netflow][flow_end_milliseconds] and ![netflow][flow_duration_milliseconds] {
      ruby {
        init => "require 'date'"
        code => "event.set('netflow.flow_duration', event.get('netflow.flow_end').to_f - event.get('netflow.flow_start').to_f)"
        add_tag => [ "calculated_duration" ]
      }
    }
    # if not TCP, no need for the tcp_flags field
    if [network][iana_number] != 6 {
      mutate {
        remove_field => [ "tcp_flags" ]
      }

    } else if [tcp_flags] {
      # convert integer TCP flag value to an array, flag string, and hex byte
      # convert text TCP flag string to an array and hex byte
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/tcp_flags_to_array.rb"
        script_params => { "source_field" => "tcp_flags" }
      }
    }

    # replace the numerical protocol number with a text equivalent
    if [network][iana_number] and ![network][transport] {
      translate {
        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/ip_proto_int2netflow.yaml"
        source => "[network][iana_number]"
        target => "[network][transport]"
      }
    }

    # populate additional fields or modify as needed to match flow sources
    if ![flow_records] or [flow_records] == "0" {
      mutate {
        add_field => { "flow_records" => "1" }
      }
    }
    if ![missed_bytes] {
      mutate {
        add_field => { "missed_bytes" => "0" }
      }
    }
    if ![destination][bytes] {
      mutate {
        add_field => { "[destination][bytes]" => "0" }
      }
    }
    if ![destination][packets] {
      mutate {
        add_field => { "[destination][packets]" => "0" }
      }
    }
    if ![source][bytes] {
      mutate {
        add_field => { "[source][bytes]" => "0" }
      }
    }
    if ![source][packets] {
      mutate {
        add_field => { "[source][packets]" => "0" }
      }
    }

    ### Add interim fields for ECS<->non-ECS compatibility
    # some of these may be better as ES scripted fields, but if we'll need actual fields if they are used
    #   later in the LS pipeline for any reason.
    #   probably easier to deal with the likely increase in storage needed just for simplicity's sake,
    #   plus they'll be removed in the future...
    if [type] == "netflow" or [type] == "archive-netflow" {
      mutate {
        copy => {
          "[netflow][flow_start]" => "flow_start"
          "[netflow][flow_end]" => "flow_end"
          "[source][ip]" => "source_ip"
          "[destination][ip]" => "destination_ip"
          "[netflow][tcp_control_bits]" => "tcp_flags"
          "[source][port]" => "source_port"
          "[destination][port]" => "destination_port"
          "[network][community_id]" => "community_id"
          "[network][transport]" => "aprotocol"
          "[network][iana_number]" => "protocol"
          "[netflow][exporter][version]" => "version"
          "[netflow][exporter][ip]" => "exporter"
          "[destination][packets]" => "in_packets"
          "[source][packets]" => "out_packets"
          "[destination][bytes]" => "in_bytes"
          "[source][bytes]" => "out_bytes"
        }
      }
    }
    ## end ECS<->non-ECS compatibility block

    # convert types
    mutate {
      convert => {
        "[destination][bytes]" => "integer"
        "[source][bytes]" => "integer"
        "flow_records" => "integer"
        "[destination][packets]" => "integer"
        "[source][packets]" => "integer"
        "missed_bytes" => "integer"
      }
      add_field => { "path" => "NetFlow from %{[netflow][exporter][ip]}" }
    }
  }

  if [type] == "archive-netflow" {
    if [network][iana_number] == "1" {
      mutate {
        replace => {
          "[source][port]" => "%{icmp_type}"
          "[destination][port]" => "%{icmp_code}"
        }
      }
      mutate {
        remove_field => [ "icmp_type", "icmp_code" ]
      }
    }
  }
}
