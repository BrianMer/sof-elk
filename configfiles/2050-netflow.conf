# SOF-ELKÂ® Configuration File
# (C)2023 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for NetFlow records

filter {
  # tag with any known uniquely-identifying characteristics are present
  if [type] == "archive-netflow" and [raw][logName] {
    mutate {
      add_tag => [ "gcp-vpcflow" ]
    }
  }

  if [type] == "archive-netflow" and "gcp-vpcflow" not in [tags] {
    # drop the header row and NODATA rows from Amazon VPC Flow entries
    if [message] == "version account-id interface-id srcaddr dstaddr srcport dstport protocol packets bytes start end action log-status"  or 
       [message] == "account-id action az-id bytes dstaddr dstport end flow-direction instance-id interface-id log-status packets pkt-dst-aws-service pkt-dstaddr pkt-src-aws-service pkt-srcaddr protocol region srcaddr srcport start vpc-id version type traffic-path tcp-flags subnet-id sublocation-type sublocation-id" or
       [message] =~ "NODATA" {
      drop { }
    }
    grok {
      patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
      # nfdump2sof-elk.sh
      match => [ "message", "(?:%{IPORHOST:exporter})?(?:%{SPACE})?%{NONNEGINT:destination_as:int}%{SPACE}%{NONNEGINT:destination_mask:int}%{SPACE}%{NONNEGINT:engine_type:int}/%{NONNEGINT:engine_id:int}%{SPACE}%{TIMESTAMP_NETFLOW:flow_start_raw}%{SPACE}%{NONNEGINT:flow_records}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:in_bytes}%{SPACE}%{NONNEGINT:in_packets}%{SPACE}%{NONNEGINT:input_snmp:int}%{SPACE}%{IP:destination_ip}%{SPACE}%{IP:next_hop_ip}%{SPACE}%{IP:source_ip}%{SPACE}(%{ICMP_TYPECODE}|%{NONNEGINT:destination_port:int})%{SPACE}%{NONNEGINT:source_port:int}%{SPACE}%{TIMESTAMP_NETFLOW:flow_end_raw}%{SPACE}%{NONNEGINT:output_snmp:int}%{SPACE}%{INT:protocol:int}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT}%{SPACE}%{NONNEGINT:source_as:int}%{SPACE}%{NONNEGINT:source_mask:int}%{SPACE}%{NONNEGINT:source_tos:int}%{SPACE}%{NOTSPACE:tcp_flags}%{SPACE}%{NONNEGINT:version:int}" ]

      # aws-vpcflow2sof-elk.sh
      match => [ "message", "%{INT:vpcflow_version} %{INT:vpcflow_account_id} %{NOTSPACE:vpcflow_interface_id} %{IP:source_ip} %{IP:destination_ip} %{INT:source_port} %{INT:destination_port} %{INT:protocol:int} %{INT:in_packets} %{INT:in_bytes} %{INT:flow_start_raw} %{INT:flow_end_raw} %{WORD:vpcflow_action} %{WORD:vpcflow_logstatus}" ]
      # AWS VPC Flow v5
      match => [ "message", "%{INT:vpcflow_account_id} %{WORD:vpcflow_action} %{NOTSPACE:vpcflow_azid} %{INT:in_bytes} %{IP:destination_ip} %{INT:destination_port} %{INT:flow_end_raw} %{WORD:vpcflow_direction} %{NOTSPACE:vpcflow_instance_id} %{NOTSPACE:vpcflow_interface_id} %{WORD:vpcflow_logstatus} %{INT:in_packets} %{NOTSPACE:vpcflow_destination_aws_service} %{IP:original_destination_ip} %{NOTSPACE:vpcflow_source_aws_service} %{IP:original_source_ip} %{INT:protocol:int} %{NOTSPACE:vpcflow_region} %{IP:source_ip} %{INT:source_port} %{INT:flow_start_raw} %{NOTSPACE:vpcflow_vpc_id} %{INT:vpcflow_version} %{WORD:vpcflow_type} %{NOTSPACE:vpcflow_traffic_path} %{INT:tcp_flags_int} %{NOTSPACE:vpcflow_subnet_id} %{NOTSPACE:vpcflow_sublocation_type} %{NOTSPACE:vpcflow_sublocation_id}" ]

      # azure-vpcflow2sof-elk.sh
      match => [ "message", "^%{GUID:exporter_guid},%{COMMONMAC:exporter_mac},%{POSINT:vpcflow_version},%{DATA:flow_rule},%{DATA:source},%{WORD:state},%{POSINT:flow_start_raw},%{POSINT:flow_end_raw},%{IP:source_ip},%{INT:source_port},%{IP:destination_ip},%{INT:destination_port},%{INT:protocol:int},%{INT:out_bytes},%{INT:out_packets},%{INT:in_bytes},%{INT:in_packets},%{INT:direction},%{WORD:traffic_decision}"]

      remove_field => [ "message", "MSECOND" ]
    }

  # Google Compute Platform VPC Flow Logs in JSON format
  # reference: https://cloud.google.com/vpc/docs/flow-logs#VpcDetails
  } else if [type] == "archive-netflow" and "gcp-vpcflow" in [tags] {
    mutate {
      rename => {
        "[raw][jsonPayload][start_time]" => "flow_start_raw"
        "[raw][jsonPayload][end_time]" => "flow_end_raw"
        "[raw][jsonPayload][connection][src_ip]" => "source_ip"
        "[raw][jsonPayload][connection][dest_ip]" => "destination_ip"
        "[raw][jsonPayload][connection][src_port]" => "source_port"
        "[raw][jsonPayload][connection][dest_port]" => "destination_port"
        "[raw][jsonPayload][connection][protocol]" => "protocol"
        "[raw][jsonPayload][bytes_sent]" => "out_bytes"
        "[raw][jsonPayload][packets_sent]" => "out_packets"
        "[raw][jsonPayload][src_instance][project_id]" => "source_instance_project_id"
        "[raw][jsonPayload][src_instance][region]" => "source_region"
        "[raw][jsonPayload][src_instance][vm_name]" => "source_vm_name"
        "[raw][jsonPayload][src_instance][zone]" => "source_zone"
        "[raw][jsonPayload][dest_instance][project_id]" => "destination_instance_project_id"
        "[raw][jsonPayload][dest_instance][region]" => "destination_region"
        "[raw][jsonPayload][dest_instance][vm_name]" => "destination_vm_name"
        "[raw][jsonPayload][dest_instance][zone]" => "destination_zone"
        "[raw][jsonPayload][src_vpc][project_id]" => "source_vpc_project_id"
        "[raw][jsonPayload][src_vpc][subnetwork_name]" => "source_vpc_subnetwork_name"
        "[raw][jsonPayload][src_vpc][vpc_name]" => "source_vpc_name"
        "[raw][jsonPayload][dest_vpc][project_id]" => "destination_vpc_project_id"
        "[raw][jsonPayload][dest_vpc][subnetwork_name]" => "destination_vpc_subnetwork_name"
        "[raw][jsonPayload][dest_vpc][vpc_name]" => "destination_vpc_name"
        "[raw][jsonPayload][src_location][asn]" => "source_as"
        "[raw][jsonPayload][dest_location][asn]" => "destination_as"
        "[raw][logName]" => "log_name"
        "[raw][resource][labels][location]" => "resource_location"
        "[raw][resource][project_id]" => "project_id"
        "[raw][resource][subnetwork_id]" => "subnetwork_id"
        "[raw][resource][subnetwork_name]" => "subnetwork_name"
        "[raw][resource][type]" => "resource_type"
      }
    }
    if [raw][jsonPayload][reporter] == "SRC" {
      mutate {
        add_field => { "exporter" => "%{source_ip}" }
      }
    } else if [raw][jsonPayload][reporter] == "DEST" {
      mutate {
        add_field => { "exporter" => "%{destination_ip}" }
      }
    }

    # remove remaining fields
    mutate {
      remove_field => [ "raw" ]
    }
  }

  if [type] == "archive-netflow" {
    if ![exporter] {
      mutate {
        replace => { "exporter" => "0.0.0.0" }
      }
    }

    # use the flow start timestamp for the event timestamp
    ##  2014-05-11 16:25:11.841 (archived from nfdump)
    date {
      match => [ "flow_start_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
    }

    ## unify timestamp formats between live and archive
    date {
      match => [ "flow_start_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
      target => "flow_start"
    }
    date {
      match => [ "flow_end_raw", "YYYY-MM-dd'THH:mm:ss.SSS'Z", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "UNIX" ]
      target => "flow_end"
    }
    mutate {
      remove_field => [ "flow_start_raw", "flow_end_raw" ]
    }
  }

  if [type] == "netflow" {
    # this is strictly cosmetic
    mutate {
      remove_tag => [ "process_archive" ]
    }

    # convert duration to seconds if it exists
    if [flowDurationMilliseconds] {
      ruby {
        code => "event.set('flow_duration', event.get('flowDurationMilliseconds').to_f / 1000)"
      }
    }
    if [flowDurationMicroseconds] {
      ruby {
        code => "event.set('flow_duration', event_get('flowDurationMicroseconds').to_f / 1000000)"
      }
    }

    ### Add interim fields for ECS<->non-ECS compatibility
    # some of these may be better as ES scripted fields, but if we'll need actual fields if they are used
    #   later in the LS pipeline for any reason.
    #   probably easier to deal with the likely increase in storage needed just for simplicity's sake,
    #   plus they'll be removed in the future...
    mutate {
      add_field => {
        "source_ip" => "%{[source][ip]}"
        "destination_ip" => "%{[destination][ip]}"
        "source_port" => "%{[source][port]}"
        "destination_port" => "%{[destination][port]}"
        "community_id" => "%{[network][community_id]}"
        "aprotocol" => "%{[network][transport]}"
        "protocol" => "%{[network][iana_number]}"
        "version" => "%{[netflow][exporter][version]}"
        "in_packets" => "%{[destination][packets]}"
        "out_packets" => "%{[source][packets]}"
        "in_bytes" => "%{[destination][bytes]}"
        "out_bytes" => "%{[source][bytes]}"
        "tcp_flags" => "%{[netflow][tcp_control_bits]}"
      }
    }
    if [netflow][flow_start_nanoseconds] and [netflow][flow_end_nanoseconds] {
      mutate {
        add_field => {
          "flow_start" => "%{[netflow][flow_start_nanoseconds]}"
          "flow_end" => "%{[netflow][flow_end_nanoseconds]}"
        }
      }
    } else if [netflow][flow_start_milliseconds] and [netflow][flow_end_milliseconds] {
      mutate {
        add_field => {
          "flow_start" => "%{[netflow][flow_start_milliseconds]}"
          "flow_end" => "%{[netflow][flow_end_milliseconds]}"
        }
      }
    } else if [netflow][flow_start_seconds] and [netflow][flow_end_seconds] {
      mutate {
        add_field => {
          "flow_start" => "%{[netflow][flow_start_seconds]}"
          "flow_end" => "%{[netflow][flow_end_seconds]}"
        }
      }
    }
    if [netflow][connection_sum_duration_seconds] {
      mutate {
        add_field => { "flow_duration" => "%{[netflow][connection_sum_duration_seconds]} "}
      }
    }
    if [netflow][exporter][address] {
      grok {
        match => [ "[netflow][exporter][address]", "^%{IP:exporter}" ]
      }
    }
    ## end ECS<->non-ECS compatibility block
  }

  if [type] == "netflow" or [type] == "archive-netflow" {
    # Calculate the duration from flow_start and flow_end
    if [flow_start] and [flow_end] and ![flow_duration] {
      ruby {
        init => "require 'date'"
        code => "event.set('flow_duration', event.get('flow_end').to_f - event.get('flow_start').to_f)"
        add_tag => [ "calculated_duration" ]
      }
    }
    # if not TCP, no need for the tcp_flags field
    if [protocol] != 6 {
      mutate {
        remove_field => [ "tcp_flags" ]
      }

    } else if [tcp_flags] {
      # convert integer TCP flag value to an array, flag string, and hex byte
      # convert text TCP flag string to an array and hex byte
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/tcp_flags_to_array.rb"
        script_params => { "source_field" => "tcp_flags" }
      }
    }

    # replace the numerical protocol number with a text equivalent
    if [protocol] and ![aprotocol] {
      translate {
        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/ip_proto_int2netflow.yaml"
        source => "protocol"
        target => "aprotocol"
      }
    }

    # populate additional fields or modify as needed to match flow sources
    if ![flow_records] or [flow_records] == "0" {
      mutate {
        add_field => { "flow_records" => "1" }
      }
    }
    if ![missed_bytes] {
      mutate {
        add_field => { "missed_bytes" => "0" }
      }
    }
    if ![in_bytes] {
      mutate {
        add_field => { "in_bytes" => "0" }
      }
    }
    if ![in_packets] {
      mutate {
        add_field => { "in_packets" => "0" }
      }
    }
    if ![out_bytes] {
      mutate {
        add_field => { "out_bytes" => "0" }
      }
    }
    if ![out_packets] {
      mutate {
        add_field => { "out_packets" => "0" }
      }
    }

    # convert types
    mutate {
      convert => {
        "in_bytes" => "integer"
        "out_bytes" => "integer"
        "flow_records" => "integer"
        "in_packets" => "integer"
        "out_packets" => "integer"
        "missed_bytes" => "integer"
      }
      add_field => { "path" => "NetFlow from %{exporter}" }
    }
  }

  if [type] == "archive-netflow" {
    if [protocol] == "1" {
      mutate {
        replace => { "source_port" => "%{icmp_type}" }
      }
      mutate {
        replace => { "destination_port" => "%{icmp_code}" }
      }
      mutate {
        remove_field => [ "icmp_type", "icmp_code" ]
      }
    }
  }
}
