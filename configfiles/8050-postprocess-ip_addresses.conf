# SOF-ELKÂ® Configuration File
# (C)2023 Lewes Technology Consulting, LLC
#
# This file contains transforms and enrichments to be applied in postprocessing

filter {
  if [source][ip] {
    if [source][ip] == "-" {
      mutate { replace => { "[source][ip]" => "0.0.0.0" } }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[source][ip]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[source][ip]"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[source][as][number]" => "[source_geo][asn]"
        "[source][as][organization][name]" => "[source_geo][as_org]"
        "[source][geo][location]" => "[source_geo][location]"
        "[source][geo][location][lat]" => "[source_geo][latitude]"
        "[source][geo][location][lon]" => "[source_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "[source][ip]" } }
  } else if [source_ip] {
    if [source_ip] == "-" {
      mutate { replace => { "source_ip" => "0.0.0.0" } }
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "source_ip"
      target => "source"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "source_ip"
      target => "source"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[source][as][number]" => "[source_geo][asn]"
        "[source][as][organization][name]" => "[source_geo][as_org]"
        "[source][geo][location]" => "[source_geo][location]"
        "[source][geo][location][lat]" => "[source_geo][latitude]"
        "[source][geo][location][lon]" => "[source_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "source_ip" } }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{source_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  # generally just for netflow, which sets source_as to 0 on a non-AS-aware exporter
  if [source_geo][asn] and [source_as] == 0 {
    mutate { replace => { "source_as" => "%{[source_geo][asn]}" } }
    mutate { gsub => [ "source_as", "^AS", "" ] }
    mutate { convert => { "source_as" => "integer" } }
  }

  if [destination][ip] {
    if [destination][ip] == "-" { mutate { replace => { "[destination][ip]" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "[destination][ip]"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "[destination][ip]"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[destination][as][number]" => "[destination_geo][asn]"
        "[destination][as][organization][name]" => "[destination_geo][as_org]"
        "[destination][geo][location]" => "[destination_geo][location]"
        "[destination][geo][location][lat]" => "[destination_geo][latitude]"
        "[destination][geo][location][lon]" => "[destination_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "[destination][ip]" } }
  } else if [destination_ip] {
    if [destination_ip] == "-" { mutate { replace => { "destination_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "destination_ip"
      target => "destination"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "destination_ip"
      target => "destination"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[destination][as][number]" => "[destination_geo][asn]"
        "[destination][as][organization][name]" => "[destination_geo][as_org]"
        "[destination][geo][location]" => "[destination_geo][location]"
        "[destination][geo][location][lat]" => "[destination_geo][latitude]"
        "[destination][geo][location][lon]" => "[destination_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "destination_ip" } }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{destination_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  # generally just for netflow, which sets destination_as to 0 on a non-AS-aware exporter
  if [destination_geo][asn] and [destination_as] == 0 {
    mutate { replace => { "destination_as" => "%{[destination_geo][asn]}" } }
    mutate { gsub => [ "destination_as", "^AS", "" ] }
    mutate { convert => { "destination_as" => "integer" } }
  }

  if [answer_ip] {
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "answer_ip"
      target => "answer"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "answer_ip"
      target => "answer"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[answer][as][number]" => "[answer_geo][asn]"
        "[answer][as][organization][name]" => "[answer_geo][as_org]"
        "[answer][geo][location]" => "[answer_geo][location]"
        "[answer][geo][location][lat]" => "[answer_geo][latitude]"
        "[answer][geo][location][lon]" => "[answer_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "answer_ip" } }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{answer_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [client_ip] {
    if [client_ip] == "-" { mutate { replace => { "client_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "client_ip"
      target => "client"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "client_ip"
      target => "client"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[client][as][number]" => "[client_geo][asn]"
        "[client][as][organization][name]" => "[client_geo][as_org]"
        "[client][geo][location]" => "[client_geo][location]"
        "[client][geo][location][lat]" => "[client_geo][latitude]"
        "[client][geo][location][lon]" => "[client_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "client_ip" } }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{client_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [remote_ip] {
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "remote_ip"
      target => "remote"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "remote_ip"
      target => "remote"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[remote][as][number]" => "[remote_geo][asn]"
        "[remote][as][organization][name]" => "[remote_geo][as_org]"
        "[remote][geo][location]" => "[remote_geo][location]"
        "[remote][geo][location][lat]" => "[remote_geo][latitude]"
        "[remote][geo][location][lon]" => "[remote_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "remote_ip" } }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{remote_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [backend_ip] {
    if [backend_ip] == "-" { mutate { replace => { "backend_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "backend_ip"
      target => "backend"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "backend_ip"
      target => "backend"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[backend][as][number]" => "[backend_geo][asn]"
        "[backend][as][organization][name]" => "[backend_geo][as_org]"
        "[backend][geo][location]" => "[backend_geo][location]"
        "[backend][geo][location][lat]" => "[backend_geo][latitude]"
        "[backend][geo][location][lon]" => "[backend_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "backend_ip" } }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{backend_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [xff_ip] {
    if [xff_ip] == "-" { mutate { replace => { "xff_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "xff_ip"
      target => "xff"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "xff_ip"
      target => "xff"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[xff][as][number]" => "[xff_geo][asn]"
        "[xff][as][organization][name]" => "[xff_geo][as_org]"
        "[xff][geo][location]" => "[xff_geo][location]"
        "[xff][geo][location][lat]" => "[xff_geo][latitude]"
        "[xff][geo][location][lon]" => "[xff_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "xff_ip" } }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{xff_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [ftp_data_source_ip] {
    if [ftp_data_source_ip] == "-" { mutate { replace => { "ftp_data_source_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "ftp_data_source_ip"
      target => "ftp_data_source"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "ftp_data_source_ip"
      target => "ftp_data_source"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[ftp_data_source][as][number]" => "[ftp_data_source_geo][asn]"
        "[ftp_data_source][as][organization][name]" => "[ftp_data_source_geo][as_org]"
        "[ftp_data_source][geo][location]" => "[ftp_data_source_geo][location]"
        "[ftp_data_source][geo][location][lat]" => "[ftp_data_source_geo][latitude]"
        "[ftp_data_source][geo][location][lon]" => "[ftp_data_source_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "ftp_data_source_ip" } }
    # cidr {
    #   address => [ "%{ftp_data_source_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{ftp_data_source_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{ftp_data_source_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{ftp_data_source_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [ftp_data_destination_ip] {
    if [ftp_data_destination_ip] == "-" { mutate { replace => { "ftp_data_destination_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "ftp_data_destination_ip"
      target => "ftp_data_destination"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "ftp_data_destination_ip"
      target => "ftp_data_destination"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[ftp_data_destination][as][number]" => "[ftp_data_destination_geo][asn]"
        "[ftp_data_destination][as][organization][name]" => "[ftp_data_destination_geo][as_org]"
        "[ftp_data_destination][geo][location]" => "[ftp_data_destination_geo][location]"
        "[ftp_data_destination][geo][location][lat]" => "[ftp_data_destination_geo][latitude]"
        "[ftp_data_destination][geo][location][lon]" => "[ftp_data_destination_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "ftp_data_destination_ip" } }
    # cidr {
    #   address => [ "%{ftp_data_destination_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{ftp_data_destination_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{ftp_data_destination_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{ftp_data_destination_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [original_source_ip] {
    if [original_source_ip] == "-" { mutate { replace => { "original_source_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "original_source_ip"
      target => "original_source"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "original_source_ip"
      target => "original_source"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[original_source][as][number]" => "[original_source_geo][asn]"
        "[original_source][as][organization][name]" => "[original_source_geo][as_org]"
        "[original_source][geo][location]" => "[original_source_geo][location]"
        "[original_source][geo][location][lat]" => "[original_source_geo][latitude]"
        "[original_source][geo][location][lon]" => "[original_source_geo][longitude]"
      }
    }
    mutate { merge => { "ips" => "original_source_ip" } }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{original_source_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [original_destination_ip] {
    if [original_destination_ip] == "-" { mutate { replace => { "original_destination_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "original_destination_ip"
      target => "original_destination"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "original_destination_ip"
      target => "original_destination"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[original_destination][as][number]" => "[original_destination_geo][asn]"
        "[original_destination][as][organization][name]" => "[original_destination_geo][as_org]"
        "[original_destination][geo][location]" => "[original_destination_geo][location]"
        "[original_destination][geo][location][lat]" => "[original_destination_geo][latitude]"
        "[original_destination][geo][location][lon]" => "[original_destination_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "original_destination_ip" } }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{original_destination_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  if [dhcp_ip] {
    if [dhcp_ip] == "-" { mutate { replace => { "dhcp_ip" => "0.0.0.0" } } }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-ASN.mmdb"
      default_database_type => "ASN"
      source => "dhcp_ip"
      target => "dhcp"
    }
    geoip {
      database => "/usr/local/share/GeoIP/GeoLite2-City.mmdb"
      source => "dhcp_ip"
      target => "dhcp"
    }
    ### Add interim fields for ECS<->non-ECS compatibility
    mutate {
      copy => {
        "[dhcp][as][number]" => "[dhcp_geo][asn]"
        "[dhcp][as][organization][name]" => "[dhcp_geo][as_org]"
        "[dhcp][geo][location]" => "[dhcp_geo][location]"
        "[dhcp][geo][location][lat]" => "[dhcp_geo][latitude]"
        "[dhcp][geo][location][lon]" => "[dhcp_geo][longitude]"
      }
    }
    # end ECS<->non-ECS
    mutate { merge => { "ips" => "dhcp_ip" } }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7" ]
    #   add_tag => [ "netblock_private", "netblock_rfc1918" ]
    # }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "169.254.0.0/16", "fe80::/10" ]
    #   add_tag => [ "netblock_linklocal" ]
    # }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "224.0.0.0/4", "ff00::/8" ]
    #   add_tag => [ "netblock_multicast" ]
    # }
    # cidr {
    #   address => [ "%{dhcp_ip}" ]
    #   network => [ "127.0.0.0/8", "::1/128" ]
    #   add_tag => [ "netblock_loopback" ]
    # }
  }

  # de-duplicate the [ips] array
  # this will go away with ECS
  ruby {
    code => '
      a = event.get("ips")
      if a.is_a? Array
        event.set("ips", a.uniq)
      end'
  }
}
